-----------------Implementation-of-ALU------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

--------------------------------------------------

ENTITY alu is

	GENERIC( N : INTEGER := 2 );
Port(

	inp_1  : IN  STD_LOGIC_VECTOR(N-1 downto 0);
	inp_2  : IN  STD_LOGIC_VECTOR(N-1 downto 0);
	Cin    : IN  STD_LOGIC;
	opcode : IN  STD_LOGIC_VECTOR(3 downto 0);
	output : OUT STD_LOGIC_VECTOR(N-1 downto 0)
	
);
End ENTITY;

--------------------------------------------------

ARCHITECTURE alu of alu is

SIGNAL y_unsig   : STD_LOGIC_VECTOR(N-1 downto 0);
SIGNAL y_sig     : SIGNED(N-1 downto 0);
SIGNAL inp1_sig  : SIGNED(N-1 downto 0);
SIGNAL inp2_sig  : SIGNED(N-1 downto 0);
--SIGNAL Cin_sig    : STD_LOGIC;

BEGIN
--------------------LOGIC-------------------------

with opcode(2 downto 0) select

	y_unsig <= NOT inp_1 		   when "000",
				  NOT inp_2          when "001",
				  (inp_1 AND  inp_2) when "010",
				  (inp_1 OR   inp_2) when "011",
				  (inp_1 NAND inp_2) when "100",
				  (inp_1 NOR  inp_2) when "101",
				  (inp_1 XOR  inp_2) when "110",
				  (inp_1 XNOR inp_2) when OTHERS;
				  
------------------ARITHMETIC----------------------

with opcode(2 downto 0) select

	y_sig <= inp1_sig 		     when "000",
				inp2_sig            when "001",
			   inp1_sig + 1        when "010",
			   inp2_sig + 1        when "011",
			   inp1_sig - 1        when "100",
			   inp2_sig - 1        when "101",
			   inp_1 + inp_2 		  when "110",
			   inp_1 + inp_2 + Cin when OTHERS;

----this approach is indeed correct, because in the concurrent vhdl code the order does not matter

inp1_sig = signed(inp_1);
inp2_sig = signed(inp_2);

output <= y_sig when opcode(3) = "1" ELSE y_unsig;

END alu;






